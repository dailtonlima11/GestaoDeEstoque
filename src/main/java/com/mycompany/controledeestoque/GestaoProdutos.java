/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.controledeestoque;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dailt
 */
public class GestaoProdutos extends javax.swing.JPanel {

    /**
     * Creates new form CadastroProdutos
     */
    public GestaoProdutos() {
        initComponents();
        carregarProdutosNaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel44 = new javax.swing.JLabel();
        campoProduto = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        campoPreco = new javax.swing.JTextField();
        boxCategoria = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel47 = new javax.swing.JLabel();
        campoID = new javax.swing.JTextField();
        btnDeletar = new javax.swing.JButton();
        btnCadastrar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel44.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel44.setText("Produto");

        campoProduto.setToolTipText("");

        jLabel45.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel45.setText("Categoria");

        jLabel46.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel46.setText("Preço (R$)");

        campoPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoPrecoActionPerformed(evt);
            }
        });

        boxCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Automação Residencial", "Smartphones", "Eletrônicos", "Informática", "Games", "Acessórios", "Outros" }));
        boxCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxCategoriaActionPerformed(evt);
            }
        });

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        jTable4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Produto", "Categoria", "Preço"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.setShowHorizontalLines(true);
        jTable4.setShowVerticalLines(true);
        jScrollPane2.setViewportView(jTable4);

        jLabel47.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel47.setText("ID*");

        campoID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campoIDActionPerformed(evt);
            }
        });

        btnDeletar.setBackground(new java.awt.Color(255, 204, 204));
        btnDeletar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnDeletar.setText("Deletar");
        btnDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletarActionPerformed(evt);
            }
        });

        btnCadastrar.setBackground(new java.awt.Color(204, 255, 204));
        btnCadastrar.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnCadastrar.setText("Cadastrar/Editar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        jLabel7.setText("*Preencher apenas para editar ou deletar produto já existente.");

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel8.setText("Gestão de Produtos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel47)
                                .addComponent(campoID, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel45)
                                    .addComponent(boxCategoria, 0, 174, Short.MAX_VALUE)))
                            .addGap(61, 61, 61)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel44)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel46)
                                        .addComponent(campoPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(145, 145, 145)
                                    .addComponent(btnDeletar)
                                    .addGap(43, 43, 43)
                                    .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(campoProduto)))))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel47)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(jLabel46))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(campoPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeletar)
                    .addComponent(btnCadastrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void boxCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxCategoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boxCategoriaActionPerformed

    private void campoPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoPrecoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoPrecoActionPerformed

    private void campoIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campoIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_campoIDActionPerformed

    private void btnDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletarActionPerformed
      int id = Integer.parseInt(campoID.getText());

            try {
            Connection conn = ConexaoBD.conectar();
            String sql = "DELETE FROM Produtos WHERE Id_Produto = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setInt(1, id);
            

            int linhasAfetadas = stmt.executeUpdate();
            if (linhasAfetadas > 0) {
                JOptionPane.showMessageDialog(null, "Produto excluído com sucesso!");
                
            } else {
                JOptionPane.showMessageDialog(null, "Nenhum produto encontrado com esse ID.");
            }

            conn.close();
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "ID inválido. Deve ser um número inteiro.");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao excluir produto: " + ex.getMessage());
        }
            carregarProdutosNaTabela();
    }//GEN-LAST:event_btnDeletarActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        String produto = campoProduto.getText();
        String categoria = boxCategoria.getSelectedItem().toString();
        float preco;
        
        if(campoID.getText().isEmpty()){
            if(produto.isEmpty() || categoria.isEmpty() || campoPreco.getText().isEmpty()){
                JOptionPane.showMessageDialog(null, "Preencha todos os campos.", "FALHA NO CADASTRO", JOptionPane.WARNING_MESSAGE);
            } else{
                try {
                    preco = Float.parseFloat(campoPreco.getText());
                    } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Digite um preço válido.");
                    return;
                    }
                
                try {
                    preco = Float.parseFloat(campoPreco.getText());
                    Connection conn = ConexaoBD.conectar();
                    String sql = "INSERT INTO Produtos (Nome_Produto, Categoria, Preco) VALUES (?, ?, ?)";
                    PreparedStatement stmt = conn.prepareStatement(sql);
                    stmt.setString(1, produto);
                    stmt.setString(2, categoria);
                    stmt.setFloat(3, preco);

                    int linhasAfetadas = stmt.executeUpdate();
                    if (linhasAfetadas > 0) {
                        JOptionPane.showMessageDialog(null, "Produto cadastrado com sucesso!");
                    } else {
                    JOptionPane.showMessageDialog(null, "Erro ao cadastrar produto.");
                    }
                    
                    conn.close();
                    
                } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage());
        }
                } 
        } else{
            
            try {
            int id = Integer.parseInt(campoID.getText());
            Connection conn = ConexaoBD.conectar();
            
            String verificar = "SELECT Id_Produto FROM Produtos WHERE Id_Produto = ?";
            PreparedStatement stmtVerifica = conn.prepareStatement(verificar);
            stmtVerifica.setInt(1, id);
            ResultSet rs = stmtVerifica.executeQuery();
            
            if(rs.next()){
                if(!produto.isEmpty()){
                String sql = "UPDATE Produtos SET Nome_Produto = ? WHERE Id_Produto = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                
                stmt.setString(1, produto);
                stmt.setInt(2, id);
                stmt.executeUpdate();
            }
            
             if(!categoria.isEmpty()){
                 String sql = "UPDATE Produtos SET Categoria = ? WHERE Id_Produto = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setString(1, categoria);
                stmt.setInt(2, id);
                stmt.executeUpdate();
            }
             if(!campoPreco.getText().isEmpty()){
                 try {
                    preco = Float.parseFloat(campoPreco.getText());
                    } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Digite um preço válido.");
                    return;
                    }
                preco = Float.parseFloat(campoPreco.getText());
                String sql = "UPDATE Produtos SET Preco = ? WHERE Id_Produto = ?";
                PreparedStatement stmt = conn.prepareStatement(sql);
                stmt.setFloat(1, preco);
                stmt.setInt(2, id);
                stmt.executeUpdate();
            }
             
              JOptionPane.showMessageDialog(null, "Produto atualizado com sucesso!");
            } else{
                JOptionPane.showMessageDialog(null, "Nenhum produto encontrado com esse ID.", "FALHA NA EDIÇÃO", JOptionPane.WARNING_MESSAGE);
            }
            
            
             
            conn.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro: " + ex.getMessage());
        }
        }
        
        
        carregarProdutosNaTabela();
   
    }//GEN-LAST:event_btnCadastrarActionPerformed

public void carregarProdutosNaTabela() {
    String sql = "SELECT Id_Produto, Nome_Produto, Categoria, Preco FROM Produtos";

    try (Connection conn = ConexaoBD.conectar();
         Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(sql)) {

        DefaultTableModel modelo = (DefaultTableModel) jTable4.getModel();
        modelo.setRowCount(0);

        while (rs.next()) {
            int id = rs.getInt("Id_Produto");
            String produto = rs.getString("Nome_Produto");
            String categoria = rs.getString("Categoria");
            float preco = rs.getFloat("Preco");

            modelo.addRow(new Object[]{id, produto, categoria, preco});
        }

    } catch (SQLException e) {
        e.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, "Erro ao carregar produtos: " + e.getMessage());
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxCategoria;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnDeletar;
    private javax.swing.JTextField campoID;
    private javax.swing.JTextField campoPreco;
    private javax.swing.JTextField campoProduto;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable4;
    // End of variables declaration//GEN-END:variables
}
