/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.controledeestoque;

import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author dailt
 */
public class Relatorios extends javax.swing.JPanel {

    /**
     * Creates new form Relatorios
     */
    public Relatorios() {
        initComponents();
        carregarRelatorios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        campoDataFim = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        btnGerarPDF = new javax.swing.JButton();
        campoDataInicio = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaRelatorios = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        campoDataFim.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        campoDataFim.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setText("Início (dd/mm/aaaa)");

        btnGerarPDF.setBackground(new java.awt.Color(204, 255, 204));
        btnGerarPDF.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        btnGerarPDF.setForeground(new java.awt.Color(0, 0, 0));
        btnGerarPDF.setText("Gerar PDF");
        btnGerarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarPDFActionPerformed(evt);
            }
        });

        campoDataInicio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd/MM/yyyy"))));
        campoDataInicio.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel3.setText("Fim (dd/mm/aaaa)");

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel8.setText("Gerar relatórios");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel4.setText("Digite o período de tempo para a geração do relatório:");

        tabelaRelatorios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Data", "Detalhes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaRelatorios);
        if (tabelaRelatorios.getColumnModel().getColumnCount() > 0) {
            tabelaRelatorios.getColumnModel().getColumn(0).setPreferredWidth(50);
            tabelaRelatorios.getColumnModel().getColumn(1).setPreferredWidth(100);
            tabelaRelatorios.getColumnModel().getColumn(2).setPreferredWidth(600);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(campoDataFim, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(btnGerarPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 794, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campoDataFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGerarPDF))))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGerarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarPDFActionPerformed
    try {
        String dataInicioTexto = campoDataInicio.getText();
        String dataFimTexto = campoDataFim.getText();

        if (dataInicioTexto.isEmpty() || dataFimTexto.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, preencha as duas datas.");
            return;
        }

        // Converte datas
        SimpleDateFormat formatoEntrada = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat formatoSQL = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat formatoArquivo = new SimpleDateFormat("dd-MM-yyyy");

        Date dataInicioUtil = formatoEntrada.parse(dataInicioTexto);
        Date dataFimUtil = formatoEntrada.parse(dataFimTexto);

        String dataInicio = formatoSQL.format(dataInicioUtil);
        String dataFim = formatoSQL.format(dataFimUtil);

        // Caminho para pasta Documents do usuário
        String userHome = System.getProperty("user.home");
        String documentsPath = userHome + File.separator + "Documents";

        // Nome do arquivo
        String nomeArquivo = "relatorio_" + formatoArquivo.format(dataInicioUtil)
                           + "_ate_" + formatoArquivo.format(dataFimUtil) + ".pdf";
        File arquivoPDF = new File(documentsPath, nomeArquivo);

        String sql = """
            SELECT 
                'Entrada' AS Tipo,
                p.Nome_Produto,
                e.Quantidade,
                e.Data_Entrada AS Data,
                e.Fornecedor AS OrigemDestino
            FROM entradas e
            INNER JOIN produtos p ON e.Id_Produto_Entrada = p.Id_Produto
            WHERE e.Data_Entrada BETWEEN ? AND ?

            UNION

            SELECT 
                'Saída' AS Tipo,
                p.Nome_Produto,
                s.Quantidade,
                s.Data_Saida AS Data,
                s.Destinatario AS OrigemDestino
            FROM saidas s
            INNER JOIN produtos p ON s.Id_Produto_Saida = p.Id_Produto
            WHERE s.Data_Saida BETWEEN ? AND ?

            ORDER BY Data;
        """;

        try (Connection conn = ConexaoBD.conectar();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, dataInicio);
            stmt.setString(2, dataFim);
            stmt.setString(3, dataInicio);
            stmt.setString(4, dataFim);

            ResultSet rs = stmt.executeQuery();

            // Gerador de PDF
            com.lowagie.text.Document document = new com.lowagie.text.Document();
            com.lowagie.text.pdf.PdfWriter.getInstance(document, new java.io.FileOutputStream(arquivoPDF));
            document.open();

            // Título
            com.lowagie.text.Font tituloFont = new com.lowagie.text.Font(com.lowagie.text.Font.HELVETICA, 16, com.lowagie.text.Font.BOLD);
            document.add(new com.lowagie.text.Paragraph("Relatório de movimentações", tituloFont));
            document.add(new com.lowagie.text.Paragraph("Período: " + dataInicioTexto + " até " + dataFimTexto));
            document.add(com.lowagie.text.Chunk.NEWLINE);

            // Tabela
            com.lowagie.text.pdf.PdfPTable tabela = new com.lowagie.text.pdf.PdfPTable(5);
            tabela.setWidthPercentage(100);
            tabela.setSpacingBefore(10f);
            tabela.setSpacingAfter(10f);

            // Cabeçalhos
            String[] cabecalhos = {"Tipo", "Produto", "Quantidade", "Data", "Origem/Destino"};
            for (String col : cabecalhos) {
                com.lowagie.text.pdf.PdfPCell cell = new com.lowagie.text.pdf.PdfPCell(new com.lowagie.text.Phrase(col));
                cell.setBackgroundColor(new java.awt.Color(200, 200, 200));
                tabela.addCell(cell);
            }

            boolean temDados = false;

            while (rs.next()) {
                temDados = true;
                tabela.addCell(rs.getString("Tipo"));
                tabela.addCell(rs.getString("Nome_Produto"));
                tabela.addCell(String.valueOf(rs.getInt("Quantidade")));
                tabela.addCell(rs.getDate("Data").toString());
                tabela.addCell(rs.getString("OrigemDestino"));
            }

            if (!temDados) {
                JOptionPane.showMessageDialog(null, "Nenhum dado encontrado para o período informado.");
                document.close();
                return;
            }

            document.add(tabela);
            document.close();

            // Inserir no banco
            StringBuilder resumo = new StringBuilder();
            resumo.append("Relatório de ").append(dataInicioTexto)
                  .append(" até ").append(dataFimTexto)
                  .append(" gerado em ").append(new SimpleDateFormat("dd/MM/yyyy HH:mm").format(new Date()));
            String insertSQL = "INSERT INTO relatorios (Tipo, Data_Relatorios, Detalhes) VALUES (?, CURDATE(), ?)";
            try (PreparedStatement insertStmt = conn.prepareStatement(insertSQL)) {
                insertStmt.setString(1, "PDF");
                insertStmt.setString(2, resumo.toString());
                insertStmt.executeUpdate();
            }

            JOptionPane.showMessageDialog(null, "Relatório gerado com sucesso em: " + arquivoPDF.getAbsolutePath());
            carregarRelatorios();
            // Abrir pasta no explorer
            java.awt.Desktop.getDesktop().open(new File(documentsPath));
            
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Erro ao gerar relatório.");
    }
    
    }//GEN-LAST:event_btnGerarPDFActionPerformed

private void carregarRelatorios() {
    try (Connection conn = ConexaoBD.conectar();
         PreparedStatement stmt = conn.prepareStatement("SELECT Id_Relatorios, Data_Relatorios, Detalhes FROM relatorios ORDER BY Data_Relatorios DESC");
         ResultSet rs = stmt.executeQuery()) {

        javax.swing.table.DefaultTableModel modelo = (javax.swing.table.DefaultTableModel) tabelaRelatorios.getModel();
        modelo.setRowCount(0); // Limpa

        while (rs.next()) {
            int id = rs.getInt("Id_Relatorios");
            Date data = rs.getDate("Data_Relatorios");
            String detalhes = rs.getString("Detalhes");

            modelo.addRow(new Object[]{id, data.toString(), detalhes});
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Erro ao carregar relatórios.");
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGerarPDF;
    private javax.swing.JFormattedTextField campoDataFim;
    private javax.swing.JFormattedTextField campoDataInicio;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaRelatorios;
    // End of variables declaration//GEN-END:variables
}
